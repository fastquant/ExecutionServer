// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/BE.DataTrade.proto

package BE;

public final class BEDataTrade {
  private BEDataTrade() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface DataTradeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required int64 TimeStamp = 1;
    boolean hasTimeStamp();
    long getTimeStamp();
    
    // required string Ticker = 2;
    boolean hasTicker();
    String getTicker();
    
    // required double Quantity = 3;
    boolean hasQuantity();
    double getQuantity();
    
    // required double Price = 4;
    boolean hasPrice();
    double getPrice();
    
    // required string IdBrokerBuy = 5;
    boolean hasIdBrokerBuy();
    String getIdBrokerBuy();
    
    // required string IdBrokerSell = 6;
    boolean hasIdBrokerSell();
    String getIdBrokerSell();
    
    // optional .BE.DataTrade.ETradeCondition TradeCondition = 7 [default = REGULAR];
    boolean hasTradeCondition();
    BE.BEDataTrade.DataTrade.ETradeCondition getTradeCondition();
  }
  public static final class DataTrade extends
      com.google.protobuf.GeneratedMessage
      implements DataTradeOrBuilder {
    // Use DataTrade.newBuilder() to construct.
    private DataTrade(Builder builder) {
      super(builder);
    }
    private DataTrade(boolean noInit) {}
    
    private static final DataTrade defaultInstance;
    public static DataTrade getDefaultInstance() {
      return defaultInstance;
    }
    
    public DataTrade getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return BE.BEDataTrade.internal_static_BE_DataTrade_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return BE.BEDataTrade.internal_static_BE_DataTrade_fieldAccessorTable;
    }
    
    public enum ETradeCondition
        implements com.google.protobuf.ProtocolMessageEnum {
      REGULAR(0, 1),
      FORMT(1, 2),
      OUTOFSEQ(2, 3),
      AVGPRC(3, 4),
      AVGPRC_NASDAQ(4, 5),
      OPENREPORTLATE(5, 6),
      OPENREPORTOUTOFSEQ(6, 7),
      OPENREPORTINSEQ(7, 8),
      PRIORREFERENCEPRICE(8, 9),
      NEXTDAYSALE(9, 10),
      BUNCHED(10, 11),
      CASHSALE(11, 12),
      SELLER(12, 13),
      SOLDLAST(13, 14),
      RULE127(14, 15),
      BUNCHEDSOLD(15, 16),
      NONBOARDLOT(16, 17),
      POSIT(17, 19),
      AUTOEXECUTION(18, 20),
      HALT(19, 21),
      DELAYED(20, 22),
      REOPEN(21, 23),
      ACQUISITION(22, 24),
      CASHMARKET(23, 25),
      NEXTDAYMARKET(24, 26),
      BURSTBASKET(25, 27),
      OPENDETAIL(26, 28),
      INTRADETAIL(27, 29),
      BASKETONCLOSE(28, 30),
      RULE155(29, 31),
      DISTRIBUTION(30, 32),
      SPLIT(31, 33),
      RESERVED(32, 34),
      CUSTOMBASKETCROSS(33, 35),
      ADJTERMS(34, 36),
      SPREAD(35, 37),
      STRADDLE(36, 38),
      BUYWRITE(37, 39),
      COMBO(38, 40),
      STPD(39, 41),
      CANC(40, 42),
      CANCLAST(41, 43),
      CANCOPEN(42, 44),
      CANCONLY(43, 45),
      CANCSTPD(44, 46),
      MATCHCROSS(45, 47),
      FASTMARKET(46, 48),
      NOMINAL(47, 49),
      CABINET(48, 50),
      BLANKPRICE(49, 51),
      NOTSPECIFIED(50, 52),
      MCOFFICIALCLOSE(51, 53),
      SPECIALTERMS(52, 54),
      CONTINGENTORDER(53, 55),
      INTERNALCROSS(54, 56),
      STOPPEDREGULAR(55, 57),
      STOPPEDSOLDLAST(56, 58),
      STOPPEDOUTOFSEQ(57, 59),
      BASIS(58, 60),
      VWAP(59, 61),
      SPECIALSESSION(60, 62),
      NANEXADMIN(61, 63),
      OPENREPORT(62, 64),
      MARKETONCLOSE(63, 65),
      NOT_DEFINED(64, 66),
      OUTOFSEQPREMKT(65, 67),
      MCOFFICIALOPEN(66, 68),
      FUTURESSPREAD(67, 69),
      OPENRANGE(68, 70),
      CLOSERANGE(69, 71),
      NOMINALCABINET(70, 72),
      CHANGINGTRANS(71, 73),
      CHANGINGTRANSCAB(72, 74),
      NOMINALUPDATE(73, 75),
      PITSETTLEMENT(74, 76),
      BLOCKTRADE(75, 77),
      EXGFORPHYSICAL(76, 78),
      VOLUMEADJUSTMENT(77, 79),
      VOLATILITYTRADE(78, 80),
      YELLOWFLAG(79, 81),
      FLOORPRICE(80, 82),
      OFFICIALPRICE(81, 83),
      UNOFFICIALPRICE(82, 84),
      MIDBIDASKPRICE(83, 85),
      ENDSESSIONHIGH(84, 86),
      ENDSESSIONLOW(85, 87),
      BACKWARDATION(86, 88),
      CONTANGO(87, 89),
      HOLIDAY(88, 90),
      PREOPENING(89, 91),
      POSTFULL(90, 92),
      POSTRESTRICTED(91, 93),
      CLOSINGAUCTION(92, 94),
      BATCH(93, 95),
      TRADING(94, 96),
      INTERMARKETSWEEP(95, 97),
      DERIVATIVE(96, 98),
      REOPENING(97, 99),
      CLOSING(98, 100),
      CAPELECTION(99, 102),
      BASISHIGH(101, 103),
      BASISLOW(102, 104),
      YIELD(103, 105),
      PRICEVARIATION(104, 106),
      STOCKOPTION(105, 107),
      STOPPEDIM(106, 108),
      BENCHMARK(107, 109),
      TRADETHRUEXEMPT(108, 110),
      IMPLIED(109, 111),
      OTC(110, 112),
      ;
      
      public static final ETradeCondition SPOTSETTLEMENT = CAPELECTION;
      public static final int REGULAR_VALUE = 1;
      public static final int FORMT_VALUE = 2;
      public static final int OUTOFSEQ_VALUE = 3;
      public static final int AVGPRC_VALUE = 4;
      public static final int AVGPRC_NASDAQ_VALUE = 5;
      public static final int OPENREPORTLATE_VALUE = 6;
      public static final int OPENREPORTOUTOFSEQ_VALUE = 7;
      public static final int OPENREPORTINSEQ_VALUE = 8;
      public static final int PRIORREFERENCEPRICE_VALUE = 9;
      public static final int NEXTDAYSALE_VALUE = 10;
      public static final int BUNCHED_VALUE = 11;
      public static final int CASHSALE_VALUE = 12;
      public static final int SELLER_VALUE = 13;
      public static final int SOLDLAST_VALUE = 14;
      public static final int RULE127_VALUE = 15;
      public static final int BUNCHEDSOLD_VALUE = 16;
      public static final int NONBOARDLOT_VALUE = 17;
      public static final int POSIT_VALUE = 19;
      public static final int AUTOEXECUTION_VALUE = 20;
      public static final int HALT_VALUE = 21;
      public static final int DELAYED_VALUE = 22;
      public static final int REOPEN_VALUE = 23;
      public static final int ACQUISITION_VALUE = 24;
      public static final int CASHMARKET_VALUE = 25;
      public static final int NEXTDAYMARKET_VALUE = 26;
      public static final int BURSTBASKET_VALUE = 27;
      public static final int OPENDETAIL_VALUE = 28;
      public static final int INTRADETAIL_VALUE = 29;
      public static final int BASKETONCLOSE_VALUE = 30;
      public static final int RULE155_VALUE = 31;
      public static final int DISTRIBUTION_VALUE = 32;
      public static final int SPLIT_VALUE = 33;
      public static final int RESERVED_VALUE = 34;
      public static final int CUSTOMBASKETCROSS_VALUE = 35;
      public static final int ADJTERMS_VALUE = 36;
      public static final int SPREAD_VALUE = 37;
      public static final int STRADDLE_VALUE = 38;
      public static final int BUYWRITE_VALUE = 39;
      public static final int COMBO_VALUE = 40;
      public static final int STPD_VALUE = 41;
      public static final int CANC_VALUE = 42;
      public static final int CANCLAST_VALUE = 43;
      public static final int CANCOPEN_VALUE = 44;
      public static final int CANCONLY_VALUE = 45;
      public static final int CANCSTPD_VALUE = 46;
      public static final int MATCHCROSS_VALUE = 47;
      public static final int FASTMARKET_VALUE = 48;
      public static final int NOMINAL_VALUE = 49;
      public static final int CABINET_VALUE = 50;
      public static final int BLANKPRICE_VALUE = 51;
      public static final int NOTSPECIFIED_VALUE = 52;
      public static final int MCOFFICIALCLOSE_VALUE = 53;
      public static final int SPECIALTERMS_VALUE = 54;
      public static final int CONTINGENTORDER_VALUE = 55;
      public static final int INTERNALCROSS_VALUE = 56;
      public static final int STOPPEDREGULAR_VALUE = 57;
      public static final int STOPPEDSOLDLAST_VALUE = 58;
      public static final int STOPPEDOUTOFSEQ_VALUE = 59;
      public static final int BASIS_VALUE = 60;
      public static final int VWAP_VALUE = 61;
      public static final int SPECIALSESSION_VALUE = 62;
      public static final int NANEXADMIN_VALUE = 63;
      public static final int OPENREPORT_VALUE = 64;
      public static final int MARKETONCLOSE_VALUE = 65;
      public static final int NOT_DEFINED_VALUE = 66;
      public static final int OUTOFSEQPREMKT_VALUE = 67;
      public static final int MCOFFICIALOPEN_VALUE = 68;
      public static final int FUTURESSPREAD_VALUE = 69;
      public static final int OPENRANGE_VALUE = 70;
      public static final int CLOSERANGE_VALUE = 71;
      public static final int NOMINALCABINET_VALUE = 72;
      public static final int CHANGINGTRANS_VALUE = 73;
      public static final int CHANGINGTRANSCAB_VALUE = 74;
      public static final int NOMINALUPDATE_VALUE = 75;
      public static final int PITSETTLEMENT_VALUE = 76;
      public static final int BLOCKTRADE_VALUE = 77;
      public static final int EXGFORPHYSICAL_VALUE = 78;
      public static final int VOLUMEADJUSTMENT_VALUE = 79;
      public static final int VOLATILITYTRADE_VALUE = 80;
      public static final int YELLOWFLAG_VALUE = 81;
      public static final int FLOORPRICE_VALUE = 82;
      public static final int OFFICIALPRICE_VALUE = 83;
      public static final int UNOFFICIALPRICE_VALUE = 84;
      public static final int MIDBIDASKPRICE_VALUE = 85;
      public static final int ENDSESSIONHIGH_VALUE = 86;
      public static final int ENDSESSIONLOW_VALUE = 87;
      public static final int BACKWARDATION_VALUE = 88;
      public static final int CONTANGO_VALUE = 89;
      public static final int HOLIDAY_VALUE = 90;
      public static final int PREOPENING_VALUE = 91;
      public static final int POSTFULL_VALUE = 92;
      public static final int POSTRESTRICTED_VALUE = 93;
      public static final int CLOSINGAUCTION_VALUE = 94;
      public static final int BATCH_VALUE = 95;
      public static final int TRADING_VALUE = 96;
      public static final int INTERMARKETSWEEP_VALUE = 97;
      public static final int DERIVATIVE_VALUE = 98;
      public static final int REOPENING_VALUE = 99;
      public static final int CLOSING_VALUE = 100;
      public static final int CAPELECTION_VALUE = 102;
      public static final int SPOTSETTLEMENT_VALUE = 102;
      public static final int BASISHIGH_VALUE = 103;
      public static final int BASISLOW_VALUE = 104;
      public static final int YIELD_VALUE = 105;
      public static final int PRICEVARIATION_VALUE = 106;
      public static final int STOCKOPTION_VALUE = 107;
      public static final int STOPPEDIM_VALUE = 108;
      public static final int BENCHMARK_VALUE = 109;
      public static final int TRADETHRUEXEMPT_VALUE = 110;
      public static final int IMPLIED_VALUE = 111;
      public static final int OTC_VALUE = 112;
      
      
      public final int getNumber() { return value; }
      
      public static ETradeCondition valueOf(int value) {
        switch (value) {
          case 1: return REGULAR;
          case 2: return FORMT;
          case 3: return OUTOFSEQ;
          case 4: return AVGPRC;
          case 5: return AVGPRC_NASDAQ;
          case 6: return OPENREPORTLATE;
          case 7: return OPENREPORTOUTOFSEQ;
          case 8: return OPENREPORTINSEQ;
          case 9: return PRIORREFERENCEPRICE;
          case 10: return NEXTDAYSALE;
          case 11: return BUNCHED;
          case 12: return CASHSALE;
          case 13: return SELLER;
          case 14: return SOLDLAST;
          case 15: return RULE127;
          case 16: return BUNCHEDSOLD;
          case 17: return NONBOARDLOT;
          case 19: return POSIT;
          case 20: return AUTOEXECUTION;
          case 21: return HALT;
          case 22: return DELAYED;
          case 23: return REOPEN;
          case 24: return ACQUISITION;
          case 25: return CASHMARKET;
          case 26: return NEXTDAYMARKET;
          case 27: return BURSTBASKET;
          case 28: return OPENDETAIL;
          case 29: return INTRADETAIL;
          case 30: return BASKETONCLOSE;
          case 31: return RULE155;
          case 32: return DISTRIBUTION;
          case 33: return SPLIT;
          case 34: return RESERVED;
          case 35: return CUSTOMBASKETCROSS;
          case 36: return ADJTERMS;
          case 37: return SPREAD;
          case 38: return STRADDLE;
          case 39: return BUYWRITE;
          case 40: return COMBO;
          case 41: return STPD;
          case 42: return CANC;
          case 43: return CANCLAST;
          case 44: return CANCOPEN;
          case 45: return CANCONLY;
          case 46: return CANCSTPD;
          case 47: return MATCHCROSS;
          case 48: return FASTMARKET;
          case 49: return NOMINAL;
          case 50: return CABINET;
          case 51: return BLANKPRICE;
          case 52: return NOTSPECIFIED;
          case 53: return MCOFFICIALCLOSE;
          case 54: return SPECIALTERMS;
          case 55: return CONTINGENTORDER;
          case 56: return INTERNALCROSS;
          case 57: return STOPPEDREGULAR;
          case 58: return STOPPEDSOLDLAST;
          case 59: return STOPPEDOUTOFSEQ;
          case 60: return BASIS;
          case 61: return VWAP;
          case 62: return SPECIALSESSION;
          case 63: return NANEXADMIN;
          case 64: return OPENREPORT;
          case 65: return MARKETONCLOSE;
          case 66: return NOT_DEFINED;
          case 67: return OUTOFSEQPREMKT;
          case 68: return MCOFFICIALOPEN;
          case 69: return FUTURESSPREAD;
          case 70: return OPENRANGE;
          case 71: return CLOSERANGE;
          case 72: return NOMINALCABINET;
          case 73: return CHANGINGTRANS;
          case 74: return CHANGINGTRANSCAB;
          case 75: return NOMINALUPDATE;
          case 76: return PITSETTLEMENT;
          case 77: return BLOCKTRADE;
          case 78: return EXGFORPHYSICAL;
          case 79: return VOLUMEADJUSTMENT;
          case 80: return VOLATILITYTRADE;
          case 81: return YELLOWFLAG;
          case 82: return FLOORPRICE;
          case 83: return OFFICIALPRICE;
          case 84: return UNOFFICIALPRICE;
          case 85: return MIDBIDASKPRICE;
          case 86: return ENDSESSIONHIGH;
          case 87: return ENDSESSIONLOW;
          case 88: return BACKWARDATION;
          case 89: return CONTANGO;
          case 90: return HOLIDAY;
          case 91: return PREOPENING;
          case 92: return POSTFULL;
          case 93: return POSTRESTRICTED;
          case 94: return CLOSINGAUCTION;
          case 95: return BATCH;
          case 96: return TRADING;
          case 97: return INTERMARKETSWEEP;
          case 98: return DERIVATIVE;
          case 99: return REOPENING;
          case 100: return CLOSING;
          case 102: return CAPELECTION;
          case 103: return BASISHIGH;
          case 104: return BASISLOW;
          case 105: return YIELD;
          case 106: return PRICEVARIATION;
          case 107: return STOCKOPTION;
          case 108: return STOPPEDIM;
          case 109: return BENCHMARK;
          case 110: return TRADETHRUEXEMPT;
          case 111: return IMPLIED;
          case 112: return OTC;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ETradeCondition>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ETradeCondition>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ETradeCondition>() {
              public ETradeCondition findValueByNumber(int number) {
                return ETradeCondition.valueOf(number);
              }
            };
      
      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return BE.BEDataTrade.DataTrade.getDescriptor().getEnumTypes().get(0);
      }
      
      private static final ETradeCondition[] VALUES = {
        REGULAR, FORMT, OUTOFSEQ, AVGPRC, AVGPRC_NASDAQ, OPENREPORTLATE, OPENREPORTOUTOFSEQ, OPENREPORTINSEQ, PRIORREFERENCEPRICE, NEXTDAYSALE, BUNCHED, CASHSALE, SELLER, SOLDLAST, RULE127, BUNCHEDSOLD, NONBOARDLOT, POSIT, AUTOEXECUTION, HALT, DELAYED, REOPEN, ACQUISITION, CASHMARKET, NEXTDAYMARKET, BURSTBASKET, OPENDETAIL, INTRADETAIL, BASKETONCLOSE, RULE155, DISTRIBUTION, SPLIT, RESERVED, CUSTOMBASKETCROSS, ADJTERMS, SPREAD, STRADDLE, BUYWRITE, COMBO, STPD, CANC, CANCLAST, CANCOPEN, CANCONLY, CANCSTPD, MATCHCROSS, FASTMARKET, NOMINAL, CABINET, BLANKPRICE, NOTSPECIFIED, MCOFFICIALCLOSE, SPECIALTERMS, CONTINGENTORDER, INTERNALCROSS, STOPPEDREGULAR, STOPPEDSOLDLAST, STOPPEDOUTOFSEQ, BASIS, VWAP, SPECIALSESSION, NANEXADMIN, OPENREPORT, MARKETONCLOSE, NOT_DEFINED, OUTOFSEQPREMKT, MCOFFICIALOPEN, FUTURESSPREAD, OPENRANGE, CLOSERANGE, NOMINALCABINET, CHANGINGTRANS, CHANGINGTRANSCAB, NOMINALUPDATE, PITSETTLEMENT, BLOCKTRADE, EXGFORPHYSICAL, VOLUMEADJUSTMENT, VOLATILITYTRADE, YELLOWFLAG, FLOORPRICE, OFFICIALPRICE, UNOFFICIALPRICE, MIDBIDASKPRICE, ENDSESSIONHIGH, ENDSESSIONLOW, BACKWARDATION, CONTANGO, HOLIDAY, PREOPENING, POSTFULL, POSTRESTRICTED, CLOSINGAUCTION, BATCH, TRADING, INTERMARKETSWEEP, DERIVATIVE, REOPENING, CLOSING, CAPELECTION, SPOTSETTLEMENT, BASISHIGH, BASISLOW, YIELD, PRICEVARIATION, STOCKOPTION, STOPPEDIM, BENCHMARK, TRADETHRUEXEMPT, IMPLIED, OTC, 
      };
      
      public static ETradeCondition valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }
      
      private final int index;
      private final int value;
      
      private ETradeCondition(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:BE.DataTrade.ETradeCondition)
    }
    
    private int bitField0_;
    // required int64 TimeStamp = 1;
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timeStamp_;
    public boolean hasTimeStamp() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public long getTimeStamp() {
      return timeStamp_;
    }
    
    // required string Ticker = 2;
    public static final int TICKER_FIELD_NUMBER = 2;
    private java.lang.Object ticker_;
    public boolean hasTicker() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getTicker() {
      java.lang.Object ref = ticker_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          ticker_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getTickerBytes() {
      java.lang.Object ref = ticker_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        ticker_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required double Quantity = 3;
    public static final int QUANTITY_FIELD_NUMBER = 3;
    private double quantity_;
    public boolean hasQuantity() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public double getQuantity() {
      return quantity_;
    }
    
    // required double Price = 4;
    public static final int PRICE_FIELD_NUMBER = 4;
    private double price_;
    public boolean hasPrice() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public double getPrice() {
      return price_;
    }
    
    // required string IdBrokerBuy = 5;
    public static final int IDBROKERBUY_FIELD_NUMBER = 5;
    private java.lang.Object idBrokerBuy_;
    public boolean hasIdBrokerBuy() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public String getIdBrokerBuy() {
      java.lang.Object ref = idBrokerBuy_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          idBrokerBuy_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getIdBrokerBuyBytes() {
      java.lang.Object ref = idBrokerBuy_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        idBrokerBuy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required string IdBrokerSell = 6;
    public static final int IDBROKERSELL_FIELD_NUMBER = 6;
    private java.lang.Object idBrokerSell_;
    public boolean hasIdBrokerSell() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public String getIdBrokerSell() {
      java.lang.Object ref = idBrokerSell_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          idBrokerSell_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getIdBrokerSellBytes() {
      java.lang.Object ref = idBrokerSell_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        idBrokerSell_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional .BE.DataTrade.ETradeCondition TradeCondition = 7 [default = REGULAR];
    public static final int TRADECONDITION_FIELD_NUMBER = 7;
    private BE.BEDataTrade.DataTrade.ETradeCondition tradeCondition_;
    public boolean hasTradeCondition() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public BE.BEDataTrade.DataTrade.ETradeCondition getTradeCondition() {
      return tradeCondition_;
    }
    
    private void initFields() {
      timeStamp_ = 0L;
      ticker_ = "";
      quantity_ = 0D;
      price_ = 0D;
      idBrokerBuy_ = "";
      idBrokerSell_ = "";
      tradeCondition_ = BE.BEDataTrade.DataTrade.ETradeCondition.REGULAR;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasTimeStamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTicker()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQuantity()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPrice()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIdBrokerBuy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIdBrokerSell()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, timeStamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTickerBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, quantity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, price_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getIdBrokerBuyBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getIdBrokerSellBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, tradeCondition_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, timeStamp_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTickerBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, quantity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, price_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getIdBrokerBuyBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getIdBrokerSellBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, tradeCondition_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static BE.BEDataTrade.DataTrade parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static BE.BEDataTrade.DataTrade parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static BE.BEDataTrade.DataTrade parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static BE.BEDataTrade.DataTrade parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(BE.BEDataTrade.DataTrade prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements BE.BEDataTrade.DataTradeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return BE.BEDataTrade.internal_static_BE_DataTrade_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return BE.BEDataTrade.internal_static_BE_DataTrade_fieldAccessorTable;
      }
      
      // Construct using BE.BEDataTrade.DataTrade.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        timeStamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        ticker_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        quantity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        price_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        idBrokerBuy_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        idBrokerSell_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        tradeCondition_ = BE.BEDataTrade.DataTrade.ETradeCondition.REGULAR;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return BE.BEDataTrade.DataTrade.getDescriptor();
      }
      
      public BE.BEDataTrade.DataTrade getDefaultInstanceForType() {
        return BE.BEDataTrade.DataTrade.getDefaultInstance();
      }
      
      public BE.BEDataTrade.DataTrade build() {
        BE.BEDataTrade.DataTrade result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private BE.BEDataTrade.DataTrade buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        BE.BEDataTrade.DataTrade result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public BE.BEDataTrade.DataTrade buildPartial() {
        BE.BEDataTrade.DataTrade result = new BE.BEDataTrade.DataTrade(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timeStamp_ = timeStamp_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ticker_ = ticker_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.quantity_ = quantity_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.price_ = price_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.idBrokerBuy_ = idBrokerBuy_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.idBrokerSell_ = idBrokerSell_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.tradeCondition_ = tradeCondition_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof BE.BEDataTrade.DataTrade) {
          return mergeFrom((BE.BEDataTrade.DataTrade)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(BE.BEDataTrade.DataTrade other) {
        if (other == BE.BEDataTrade.DataTrade.getDefaultInstance()) return this;
        if (other.hasTimeStamp()) {
          setTimeStamp(other.getTimeStamp());
        }
        if (other.hasTicker()) {
          setTicker(other.getTicker());
        }
        if (other.hasQuantity()) {
          setQuantity(other.getQuantity());
        }
        if (other.hasPrice()) {
          setPrice(other.getPrice());
        }
        if (other.hasIdBrokerBuy()) {
          setIdBrokerBuy(other.getIdBrokerBuy());
        }
        if (other.hasIdBrokerSell()) {
          setIdBrokerSell(other.getIdBrokerSell());
        }
        if (other.hasTradeCondition()) {
          setTradeCondition(other.getTradeCondition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasTimeStamp()) {
          
          return false;
        }
        if (!hasTicker()) {
          
          return false;
        }
        if (!hasQuantity()) {
          
          return false;
        }
        if (!hasPrice()) {
          
          return false;
        }
        if (!hasIdBrokerBuy()) {
          
          return false;
        }
        if (!hasIdBrokerSell()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              timeStamp_ = input.readInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              ticker_ = input.readBytes();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              quantity_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              price_ = input.readDouble();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              idBrokerBuy_ = input.readBytes();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              idBrokerSell_ = input.readBytes();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              BE.BEDataTrade.DataTrade.ETradeCondition value = BE.BEDataTrade.DataTrade.ETradeCondition.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                tradeCondition_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int64 TimeStamp = 1;
      private long timeStamp_ ;
      public boolean hasTimeStamp() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public long getTimeStamp() {
        return timeStamp_;
      }
      public Builder setTimeStamp(long value) {
        bitField0_ |= 0x00000001;
        timeStamp_ = value;
        onChanged();
        return this;
      }
      public Builder clearTimeStamp() {
        bitField0_ = (bitField0_ & ~0x00000001);
        timeStamp_ = 0L;
        onChanged();
        return this;
      }
      
      // required string Ticker = 2;
      private java.lang.Object ticker_ = "";
      public boolean hasTicker() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getTicker() {
        java.lang.Object ref = ticker_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          ticker_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setTicker(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        ticker_ = value;
        onChanged();
        return this;
      }
      public Builder clearTicker() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ticker_ = getDefaultInstance().getTicker();
        onChanged();
        return this;
      }
      void setTicker(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        ticker_ = value;
        onChanged();
      }
      
      // required double Quantity = 3;
      private double quantity_ ;
      public boolean hasQuantity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public double getQuantity() {
        return quantity_;
      }
      public Builder setQuantity(double value) {
        bitField0_ |= 0x00000004;
        quantity_ = value;
        onChanged();
        return this;
      }
      public Builder clearQuantity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        quantity_ = 0D;
        onChanged();
        return this;
      }
      
      // required double Price = 4;
      private double price_ ;
      public boolean hasPrice() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public double getPrice() {
        return price_;
      }
      public Builder setPrice(double value) {
        bitField0_ |= 0x00000008;
        price_ = value;
        onChanged();
        return this;
      }
      public Builder clearPrice() {
        bitField0_ = (bitField0_ & ~0x00000008);
        price_ = 0D;
        onChanged();
        return this;
      }
      
      // required string IdBrokerBuy = 5;
      private java.lang.Object idBrokerBuy_ = "";
      public boolean hasIdBrokerBuy() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public String getIdBrokerBuy() {
        java.lang.Object ref = idBrokerBuy_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          idBrokerBuy_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setIdBrokerBuy(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        idBrokerBuy_ = value;
        onChanged();
        return this;
      }
      public Builder clearIdBrokerBuy() {
        bitField0_ = (bitField0_ & ~0x00000010);
        idBrokerBuy_ = getDefaultInstance().getIdBrokerBuy();
        onChanged();
        return this;
      }
      void setIdBrokerBuy(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000010;
        idBrokerBuy_ = value;
        onChanged();
      }
      
      // required string IdBrokerSell = 6;
      private java.lang.Object idBrokerSell_ = "";
      public boolean hasIdBrokerSell() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public String getIdBrokerSell() {
        java.lang.Object ref = idBrokerSell_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          idBrokerSell_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setIdBrokerSell(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        idBrokerSell_ = value;
        onChanged();
        return this;
      }
      public Builder clearIdBrokerSell() {
        bitField0_ = (bitField0_ & ~0x00000020);
        idBrokerSell_ = getDefaultInstance().getIdBrokerSell();
        onChanged();
        return this;
      }
      void setIdBrokerSell(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000020;
        idBrokerSell_ = value;
        onChanged();
      }
      
      // optional .BE.DataTrade.ETradeCondition TradeCondition = 7 [default = REGULAR];
      private BE.BEDataTrade.DataTrade.ETradeCondition tradeCondition_ = BE.BEDataTrade.DataTrade.ETradeCondition.REGULAR;
      public boolean hasTradeCondition() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public BE.BEDataTrade.DataTrade.ETradeCondition getTradeCondition() {
        return tradeCondition_;
      }
      public Builder setTradeCondition(BE.BEDataTrade.DataTrade.ETradeCondition value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        tradeCondition_ = value;
        onChanged();
        return this;
      }
      public Builder clearTradeCondition() {
        bitField0_ = (bitField0_ & ~0x00000040);
        tradeCondition_ = BE.BEDataTrade.DataTrade.ETradeCondition.REGULAR;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:BE.DataTrade)
    }
    
    static {
      defaultInstance = new DataTrade(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:BE.DataTrade)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_BE_DataTrade_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_BE_DataTrade_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031protos/BE.DataTrade.proto\022\002BE\"\346\017\n\tData" +
      "Trade\022\021\n\tTimeStamp\030\001 \002(\003\022\016\n\006Ticker\030\002 \002(\t" +
      "\022\020\n\010Quantity\030\003 \002(\001\022\r\n\005Price\030\004 \002(\001\022\023\n\013IdB" +
      "rokerBuy\030\005 \002(\t\022\024\n\014IdBrokerSell\030\006 \002(\t\022>\n\016" +
      "TradeCondition\030\007 \001(\0162\035.BE.DataTrade.ETra" +
      "deCondition:\007REGULAR\"\251\016\n\017ETradeCondition" +
      "\022\013\n\007REGULAR\020\001\022\t\n\005FORMT\020\002\022\014\n\010OUTOFSEQ\020\003\022\n" +
      "\n\006AVGPRC\020\004\022\021\n\rAVGPRC_NASDAQ\020\005\022\022\n\016OPENREP" +
      "ORTLATE\020\006\022\026\n\022OPENREPORTOUTOFSEQ\020\007\022\023\n\017OPE" +
      "NREPORTINSEQ\020\010\022\027\n\023PRIORREFERENCEPRICE\020\t\022",
      "\017\n\013NEXTDAYSALE\020\n\022\013\n\007BUNCHED\020\013\022\014\n\010CASHSAL" +
      "E\020\014\022\n\n\006SELLER\020\r\022\014\n\010SOLDLAST\020\016\022\013\n\007RULE127" +
      "\020\017\022\017\n\013BUNCHEDSOLD\020\020\022\017\n\013NONBOARDLOT\020\021\022\t\n\005" +
      "POSIT\020\023\022\021\n\rAUTOEXECUTION\020\024\022\010\n\004HALT\020\025\022\013\n\007" +
      "DELAYED\020\026\022\n\n\006REOPEN\020\027\022\017\n\013ACQUISITION\020\030\022\016" +
      "\n\nCASHMARKET\020\031\022\021\n\rNEXTDAYMARKET\020\032\022\017\n\013BUR" +
      "STBASKET\020\033\022\016\n\nOPENDETAIL\020\034\022\017\n\013INTRADETAI" +
      "L\020\035\022\021\n\rBASKETONCLOSE\020\036\022\013\n\007RULE155\020\037\022\020\n\014D" +
      "ISTRIBUTION\020 \022\t\n\005SPLIT\020!\022\014\n\010RESERVED\020\"\022\025" +
      "\n\021CUSTOMBASKETCROSS\020#\022\014\n\010ADJTERMS\020$\022\n\n\006S",
      "PREAD\020%\022\014\n\010STRADDLE\020&\022\014\n\010BUYWRITE\020\'\022\t\n\005C" +
      "OMBO\020(\022\010\n\004STPD\020)\022\010\n\004CANC\020*\022\014\n\010CANCLAST\020+" +
      "\022\014\n\010CANCOPEN\020,\022\014\n\010CANCONLY\020-\022\014\n\010CANCSTPD" +
      "\020.\022\016\n\nMATCHCROSS\020/\022\016\n\nFASTMARKET\0200\022\013\n\007NO" +
      "MINAL\0201\022\013\n\007CABINET\0202\022\016\n\nBLANKPRICE\0203\022\020\n\014" +
      "NOTSPECIFIED\0204\022\023\n\017MCOFFICIALCLOSE\0205\022\020\n\014S" +
      "PECIALTERMS\0206\022\023\n\017CONTINGENTORDER\0207\022\021\n\rIN" +
      "TERNALCROSS\0208\022\022\n\016STOPPEDREGULAR\0209\022\023\n\017STO" +
      "PPEDSOLDLAST\020:\022\023\n\017STOPPEDOUTOFSEQ\020;\022\t\n\005B" +
      "ASIS\020<\022\010\n\004VWAP\020=\022\022\n\016SPECIALSESSION\020>\022\016\n\n",
      "NANEXADMIN\020?\022\016\n\nOPENREPORT\020@\022\021\n\rMARKETON" +
      "CLOSE\020A\022\017\n\013NOT_DEFINED\020B\022\022\n\016OUTOFSEQPREM" +
      "KT\020C\022\022\n\016MCOFFICIALOPEN\020D\022\021\n\rFUTURESSPREA" +
      "D\020E\022\r\n\tOPENRANGE\020F\022\016\n\nCLOSERANGE\020G\022\022\n\016NO" +
      "MINALCABINET\020H\022\021\n\rCHANGINGTRANS\020I\022\024\n\020CHA" +
      "NGINGTRANSCAB\020J\022\021\n\rNOMINALUPDATE\020K\022\021\n\rPI" +
      "TSETTLEMENT\020L\022\016\n\nBLOCKTRADE\020M\022\022\n\016EXGFORP" +
      "HYSICAL\020N\022\024\n\020VOLUMEADJUSTMENT\020O\022\023\n\017VOLAT" +
      "ILITYTRADE\020P\022\016\n\nYELLOWFLAG\020Q\022\016\n\nFLOORPRI" +
      "CE\020R\022\021\n\rOFFICIALPRICE\020S\022\023\n\017UNOFFICIALPRI",
      "CE\020T\022\022\n\016MIDBIDASKPRICE\020U\022\022\n\016ENDSESSIONHI" +
      "GH\020V\022\021\n\rENDSESSIONLOW\020W\022\021\n\rBACKWARDATION" +
      "\020X\022\014\n\010CONTANGO\020Y\022\013\n\007HOLIDAY\020Z\022\016\n\nPREOPEN" +
      "ING\020[\022\014\n\010POSTFULL\020\\\022\022\n\016POSTRESTRICTED\020]\022" +
      "\022\n\016CLOSINGAUCTION\020^\022\t\n\005BATCH\020_\022\013\n\007TRADIN" +
      "G\020`\022\024\n\020INTERMARKETSWEEP\020a\022\016\n\nDERIVATIVE\020" +
      "b\022\r\n\tREOPENING\020c\022\013\n\007CLOSING\020d\022\017\n\013CAPELEC" +
      "TION\020f\022\022\n\016SPOTSETTLEMENT\020f\022\r\n\tBASISHIGH\020" +
      "g\022\014\n\010BASISLOW\020h\022\t\n\005YIELD\020i\022\022\n\016PRICEVARIA" +
      "TION\020j\022\017\n\013STOCKOPTION\020k\022\r\n\tSTOPPEDIM\020l\022\r",
      "\n\tBENCHMARK\020m\022\023\n\017TRADETHRUEXEMPT\020n\022\013\n\007IM" +
      "PLIED\020o\022\007\n\003OTC\020p"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_BE_DataTrade_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_BE_DataTrade_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_BE_DataTrade_descriptor,
              new java.lang.String[] { "TimeStamp", "Ticker", "Quantity", "Price", "IdBrokerBuy", "IdBrokerSell", "TradeCondition", },
              BE.BEDataTrade.DataTrade.class,
              BE.BEDataTrade.DataTrade.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
